<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN">
<html>
    <head>
        <title>
            Geolocator
        </title>
        <style type="text/css">
html,body {
            height: 100%;
            margin: 0;
            padding: 0;
        }

        #map {
            height: 100%;
        }
        
        .controls {
            padding: 15px; 
        }
        
        .control {
            cursor: pointer;
            background-color: white;
            border: 5px solid #fff;
            box-shadow: 0 2px 6px rgba(0,0,0,.3);
            text-align: center;
        }
        </style>
    </head>
    <body>
        <div id="map"></div>
        <div id="controls" class="controls">
            <span id="prev" class="control"><</span>
            <span id="all" class="control">All Devices</span>
            <span id="next" class="control">></span>
        </div>
        <script type="text/javascript" src="https://cdn.jsdelivr.net/particle-api-js/5/particle.min.js">
</script>
            <script type="text/javascript">
// the map
        var map;
        var devices = {};
        var device_ids = [];
        var current_device;
        var websocket;

        function fit_map_to_devices() {
            // make sure all the markers are visible on the map
            if(Object.keys(devices).length > 0) {
                var bounds = new google.maps.LatLngBounds();
                for (var id in devices) {
                    if (devices.hasOwnProperty(id)) {
                        bounds.extend(devices[id].marker.getPosition());
                        bounds.union(devices[id].circle.getBounds());
                    }  
                }
                map.fitBounds(bounds);
            } 
        }
        
        function next_device () {
            // if there are devices...
            if(Object.keys(devices).length > 0) {
                if(current_device) {
                    var id_index = device_ids.indexOf(current_device);
                    if (id_index + 1 == device_ids.length) {
                        current_device = device_ids[0];
                    } else {
                        current_device = device_ids[id_index + 1];
                    }
                } else {
                    current_device = device_ids[0];
                }
                map.fitBounds(devices[current_device].circle.getBounds());
            } else {
                console.log('next_device: no devices')
            }
        }

        function prev_device () {
            // if there are devices...
            if(Object.keys(devices).length > 0) {
                if(current_device) {
                    var id_index = device_ids.indexOf(current_device);
                    if (id_index - 1 == -1) {
                        current_device = device_ids[device_ids.length - 1];
                    } else {
                        current_device = device_ids[id_index - 1];
                    }
                } else {
                    current_device = device_ids[device_ids.length - 1];
                }
                map.fitBounds(devices[current_device].circle.getBounds());
            } else {
                console.log('prev_device: no devices')
            }
        }

        function create_map(center) {
            map = new google.maps.Map(document.getElementById('map'), {
                center: center,
                zoom: 12,
            });
            
            // setup some custom controls to navigate the devices
            var controls= document.getElementById("controls");
   
            var all_button= document.getElementById("all");
            all_button.addEventListener('click', fit_map_to_devices);
   
            var next_button= document.getElementById("next");
            next_button.addEventListener('click', next_device);
   
            var prev_button= document.getElementById("prev");
            prev_button.addEventListener('click', prev_device);
   
            map.controls[google.maps.ControlPosition.TOP_RIGHT].push(controls);
        }

        function initialize_map() {

            // if the browser geolocates then center on the location of the user
            if (navigator.geolocation) {
                 navigator.geolocation.getCurrentPosition(function (position) {
                     var center = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
                     // create the map
                     create_map(center);
                 });
            } else  {
                // by default center on the geographic center of the US  
                var center = new google.maps.LatLng(39.8333333,-98.585522);
                // create the map
                create_map(center);
            }
        }

        function create_marker(device_id, pos, acc, pub) {
            devices[device_id] = {
                marker: new google.maps.Marker({   // this is the marker at the center of the accuracy circle
                    title: device_id +'\n'+ pub,
                    position: pos,
                    map: map,
                    icon: {
                        path: google.maps.SymbolPath.BACKWARD_CLOSED_ARROW, // CIRCLE or BACKWARD_CLOSED_ARROW,
                        fillColor: '#'+ Math.floor(Math.random()*16777215).toString(16), // random color for each new device
                        fillOpacity: 1.0,
                        scale: 4.5,
                        strokeColor: 'white',
                        strokeWeight: 1
                    }
                }),
                circle: new google.maps.Circle({    // this is the accuracy circle
                    map: map,
                    center: pos,
                    radius: acc,
                    strokeWeight: 0.5,
                    strokeColor: 'white',
                    fillColor: 'lightblue',
                })
            };
            device_ids.push(device_id);
            device_ids.sort();
        }

        function update_marker(device_id, pos, acc, pub) {
            var m = devices[device_id].marker;
            var c = devices[device_id].circle;

            m.setPosition(pos);
            m.setTitle(device_id +'\n'+ pub);
            c.setRadius(acc);
            c.setCenter(pos);
        }

        function update_map(device_id, pos, acc, pub) {
            if( !(device_id in devices) ) {
                // if this is the first time encoutering this device, create it and get out
                create_marker(device_id, pos, acc, pub);
            } else {
                // get the marker and accuracy circle
                update_marker(device_id, pos, acc, pub);
            }
        }

        function initialize_websockets() {
            // The external ip is determined by app.js and passed into the template. 
            var webSocketHost = location.protocol === 'https:' ? 'wss://' : 'ws://';
            var externalIp = '<%= external_ip %>';
            var webSocketUri = webSocketHost + externalIp + ':<%= ws_port %><%= ws_route %>';

            // Establish the WebSocket connection and register event handlers. 
            console.log('websocket uri: ' + webSocketUri)
            websocket = new WebSocket(webSocketUri);

            websocket.onopen = function() {
                console.log('Connected');
            };
            websocket.onclose = function() {
                console.log('Closed');
            };
            websocket.onmessage = function(e) {
                console.log(e.data);
                var data = JSON.parse(e.data);
                update_map(data.id, data.pos, data.acc, data.pub);
            };
            websocket.onerror = function(e) {
                console.log('Error: ', e);
            };
        }

        function initialize() {
            console.log('Google Maps API version: ' + google.maps.version);
            initialize_map();
            initialize_websockets();
        }
        </script><script async="" defer src="https://maps.googleapis.com/maps/api/js?key=<%= map_api_key %>&amp;callback=initialize" type="text/javascript">
</script>
    </body>
</html>
